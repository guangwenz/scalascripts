package example

/** 4Sum II
  * Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:
  *
  * 0 <= i, j, k, l < n
  * nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
  *
  * Constraints:
  *
  * n == nums1.length
  * n == nums2.length
  * n == nums3.length
  * n == nums4.length
  * 1 <= n <= 200
  * -2^28 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 2^28
  *
  * https://leetcode.com/explore/interview/card/top-interview-questions-hard/116/array-and-strings/829/
  */
trait `4SumII` {

  /** naive O(n^4) solution
    */
  object Solution {
    def fourSumCount(
        nums1: Array[Int],
        nums2: Array[Int],
        nums3: Array[Int],
        nums4: Array[Int]
    ): Int = {
      val sumMap = collection.mutable.Map.empty[Int, Int]
      for {
        n1 <- nums1
        n2 <- nums2
        sum = n1 + n2
      } yield sumMap.put(sum, sumMap.getOrElse(sum, 0) + 1)
      val p = for {
        n3 <- nums3
        n4 <- nums4
        sum = -(n3 + n4)
        if sumMap.contains(sum)
      } yield sumMap(sum)
      p.sum
    }
  }

  def run() = {
    println(
      Solution.fourSumCount(
        Array(-1, -1),
        Array(-1, 1),
        Array(-1, 1),
        Array(1, -1)
      ) == 6
    )
    println(
      Solution.fourSumCount(
        Array(1),
        Array(-1),
        Array(0),
        Array(1)
      ) == 0
    )
    println(
      Solution.fourSumCount(
        Array(1, 2),
        Array(-2, -1),
        Array(-1, 2),
        Array(0, 2)
      ) == 2
    )
    println(
      Solution.fourSumCount(
        Array(0),
        Array(0),
        Array(0),
        Array(0)
      ) == 1
    )
    println(
      Solution.fourSumCount(
        Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0),
        Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0),
        Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0),
        Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0)
      )
    )
    println(
      Solution.fourSumCount(
        Array(-26, -11, 3, -8, -31, -29, -7, -10, -8, 9, -24, 9, -18, 2, -3, 5,
          4, 1, -4, -23, -19, -14, -28, -30, -25, -15, 1, -27, -19, 9, 5, -15,
          -6, 8, 9, -23, -9, -14, 2, 3, -2, -4, 4, -15, 7, 9, -14, -8, -3, -1,
          -28, -2, -19, 2, -31, -8, -19, -9, -29, -15, -4, -2, -18, 10, 2, -8,
          -6, 4, 4, -25, 2, -27, -21, -12, -15, 2, 9, 4, -4, -18, -22, -18, -24,
          -20, 4, -6, -12, -4, 7, -23, -32, -4, -16, 5, 3, -21, -15, -22, 5,
          -25),
        Array(-29, -1, -12, -12, -4, 4, 4, -25, -21, -3, -25, -2, -16, -15, -22,
          -26, -31, -9, -19, 10, -1, -1, -6, -28, -32, -31, -10, -31, -8, 1, 5,
          -19, -29, -8, -25, -25, -14, -27, -1, -26, 6, -20, 0, -3, -25, -22, 3,
          -20, -25, -4, -6, -27, -8, -26, -4, -25, -31, -27, -32, -29, -14, 10,
          -25, -11, -32, -25, -13, -5, -27, -30, -5, -4, -12, 0, -4, 9, -27, -6,
          -28, -30, -19, -5, -19, -18, -3, -32, -17, -1, -10, 3, -17, -31, -26,
          -16, -10, 6, -19, -19, 3, -2),
        Array(-3, -17, -23, -28, -27, -28, -28, 5, -18, -32, -7, 0, -27, 5, -15,
          -30, 9, 6, 4, -11, 3, 5, 10, -2, -32, -22, -30, -9, -4, 10, 8, -9, 0,
          -26, -8, -7, -3, -21, -22, -28, -17, -14, -15, -9, 10, 4, -8, -32, 9,
          -7, -7, -18, -5, 2, -11, -27, -2, 9, 8, -26, -2, -8, -32, -11, -3,
          -16, -22, 8, -29, -3, -10, -30, 8, 5, -23, -2, -22, -15, -32, -2, -23,
          -3, 0, -16, -10, -29, -18, -24, -24, -16, -1, 3, -22, -23, 3, -20, 7,
          -16, -11, 6),
        Array(-4, -13, -10, -2, 5, -23, -10, 6, 7, -23, -12, -21, 4, -8, -9, -5,
          -18, -5, -22, -30, -23, 9, -27, -1, 5, -18, -23, -6, 1, -23, -20, -30,
          5, -21, -15, -30, 10, -26, -7, -10, -21, -12, -4, 9, -8, 2, -27, -14,
          -11, 0, -1, -26, -27, 8, -14, 9, -19, -23, -10, -31, -16, -17, -22,
          -13, 9, -26, 5, -14, 4, -11, 4, -8, 4, -29, -32, -24, -22, -6, -3, 7,
          -17, -19, -32, 9, -31, -31, -30, -6, -10, -4, -7, -27, -25, -25, 7,
          -6, -17, 7, -30, 6)
      )
    )
    println(
      Solution.fourSumCount(
        Array(0, -19, -7, -3, -18, -29, -29, -23, 4, -31, -3, -25, -10, -15, 8,
          -8, -32, 6, 10, -14, 4, -29, -15, -20, -29, -26, -11, -20, -25, -30,
          3, -6, -12, 9, -10, 9, 10, 4, -28, -18, -4, -16, 0, -15, -31, 9, -28,
          2, 3, -14, -11, -7, -9, -4, -27, -4, -26, -23, -31, -2, -11, -7, 7,
          -3, -19, -5, -11, -6, 10, -26, -30, -5, -4, -6, -22, -21, -29, -14, 0,
          -28, 5, -16, 5, -21, -30, 2, -22, -10, -10, -9, -11, -20, -17, 1, -4,
          -17, -18, -15, -30, -29),
        Array(-11, -28, -18, 1, -1, -2, -10, -8, -19, -4, -13, -20, -2, -16, 9,
          -3, -20, 5, -21, 8, -29, -28, -5, -25, -27, -3, -11, -13, -13, 6, -30,
          -24, 7, -6, -5, -7, -23, -13, -1, -17, -2, 9, -25, -24, 5, -18, -15,
          -6, -16, -20, -26, -32, -27, -15, -29, -3, -20, -1, -32, -21, -1, 10,
          -26, 8, -18, 7, -3, 7, 0, -27, -25, -5, -16, -5, -23, -26, -16, -29,
          10, -26, -28, -5, -22, -29, -12, -2, -27, -32, -4, -30, -13, -2, 8,
          -24, -16, -9, 9, -27, -12, 9),
        Array(-26, 5, 4, -8, -18, -23, -4, 10, 7, -22, -21, -26, -26, -13, -15,
          -31, -24, -13, -8, -31, -18, -23, -8, -1, -1, 3, -3, -29, -8, -30,
          -17, -12, -23, -19, -21, -7, -24, 8, -2, -29, -26, -20, 6, 9, -18,
          -22, -27, -29, -31, 1, -32, -14, -31, -31, -24, -8, -30, -20, 7, -29,
          -30, -19, -15, 1, 1, -30, -25, -12, -16, -14, 9, -13, 6, -10, -15, -1,
          -21, -4, -14, 1, -21, -7, -15, -24, -16, 9, -25, -18, -26, -26, -27,
          -5, 4, -23, 8, 2, -14, -30, 0, -12),
        Array(-5, -15, -26, -25, 5, 3, 1, 2, -1, -1, -29, -11, 6, -23, -12, -27,
          1, -18, -10, 1, 9, -2, -21, -12, -7, 2, -8, -26, 3, -6, 0, 7, -22, -9,
          5, 10, -29, -14, -25, -9, -1, -32, 1, -14, -27, -29, -30, 8, -15, 2,
          3, -11, -19, 4, -26, -10, 3, 2, 8, -25, 7, 1, -19, 2, -9, -8, -30, 1,
          -29, 2, 0, -7, 6, 1, 6, 8, 1, 7, -8, -28, 3, 4, -30, -2, -10, -1, -11,
          -3, 0, -19, 0, 4, -3, -29, -15, -13, -7, 10, 10, 9)
      )
    )
  }
}
